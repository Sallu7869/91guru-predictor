91guru-predictor/
├── backend/
│   ├── app.py
│   ├── scraper.py
│   └── predictor.py
├── frontend/
│   ├── index.html
│   ├── style.css
│   └── script.js
├── requirements.txt
└── Procfile
# predictor.py
import random

def predict_next(results):
    last_100 = results[-100:]
    counts = {}
    for res in last_100:
        counts[res['number']] = counts.get(res['number'], 0) + 1
    
    most_common = max(counts, key=counts.get)
    pred_number = (most_common + random.choice([-1, 0, 1])) % 10
    return {
        "number": pred_number,
        "size": "Big" if pred_number >= 5 else "Small",
        "color": (
            "Red" if pred_number in [1, 3, 7, 9]
            else "Green" if pred_number in [0, 2, 4, 6, 8]
            else "Violet"
        )
    }
# scraper.py
import requests
from bs4 import BeautifulSoup

def fetch_latest_result():
    # Simulated result for demo (replace with Selenium for real scraping)
    import random
    import time
    return {
        "period": int(time.time()),
        "number": random.randint(0, 9)
    }
# app.py
from flask import Flask, jsonify
from scraper import fetch_latest_result
from predictor import predict_next

app = Flask(__name__)
results = []

@app.route('/api/result')
def get_result():
    global results
    new_result = fetch_latest_result()
    results.append(new_result)
    if len(results) > 100:
        results = results[-100:]
    return jsonify(new_result)

@app.route('/api/predict')
def get_prediction():
    if len(results) < 10:
        return jsonify({"error": "Not enough data"})
    prediction = predict_next(results)
    return jsonify(prediction)

if __name__ == '__main__':
    app.run(debug=True)
flask
requests
beautifulsoup4
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>91 Guru Prediction</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>
  <h1>91 Guru Live Prediction</h1>
  <div id="result"></div>
  <div id="prediction"></div>
  <script src="script.js"></script>
</body>
</html>
setInterval(() => {
  fetch("https://your-backend-url/api/result")
    .then(res => res.json())
    .then(data => {
      document.getElementById("result").innerText =
        `Current Period: ${data.period}, Number: ${data.number}`;
    });

  fetch("https://your-backend-url/api/predict")
    .then(res => res.json())
    .then(pred => {
      document.getElementById("prediction").innerText =
        `Prediction → Number: ${pred.number}, Size: ${pred.size}, Color: ${pred.color}`;
    });
}, 10000);
